const testCases = [
    {
      "testId": 1,
      "testDescription": "Getting businesses succeeds",
      "httpVerb": "GET",
      "endpoint": "/businesses",
      "pathParams": "",
      "queryParams": "",
      "inputData": "sampleBusinessNoPhotosOrReviews",
      "expectedResponseBody": "paginatedBusinessResponse",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 2,
      "testDescription": "Creating a business succeeds",
      "httpVerb": "POST",
      "endpoint": "/businesses",
      "pathParams": "",
      "queryParams": "",
      "inputData": "sampleBusinessNoPhotosOrReviews",
      "expectedResponseBody": "sampleBusinessExpectedResponse",
      "success": true,
      "preloadData": false
    },
    {
      "testId": 3,
      "testDescription": "Creating a business with optional fields suceeds",
      "httpVerb": "POST",
      "endpoint": "/businesses",
      "pathParams": "",
      "queryParams": "",
      "inputData": "sampleBusinessWithPhotosOrReviews",
      "expectedResponseBody": "sampleBusinessExpectedResponse",
      "success": true,
      "preloadData": false
    },
    {
      "testId": 4,
      "testDescription": "Creating a business with missing fields fails",
      "httpVerb": "POST",
      "endpoint": "/businesses",
      "pathParams": "",
      "queryParams": "",
      "inputData": "sampleBusinessMissingData",
      "expectedResponseBody": "sampleBusinessExpectedFailedResponse",
      "success": false,
      "preloadData": false
    },
    {
      "testId": 5,
      "testDescription": "Getting business by id succeeds",
      "httpVerb": "GET",
      "endpoint": "/businesses",
      "pathParams": "1",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "sampleBusinessNoPhotosOrReviews",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 6,
      "testDescription": "Getting business by id with optional params succeeds",
      "httpVerb": "GET",
      "endpoint": "/businesses",
      "pathParams": "2",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 7,
      "testDescription": "getting a a business by id that doesn't exist fails",
      "httpVerb": "GET",
      "endpoint": "/businesses",
      "pathParams": "23423423424",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "sampleBusinessExpectedFailedResponse",
      "success": false,
      "preloadData": true
    },
    {
      "testId": 8,
      "testDescription": "updating a business succeeds",
      "httpVerb": "PUT",
      "endpoint": "/businesses",
      "pathParams": "1",
      "queryParams": "",
      "inputData": "sampleBusinessEdited",
      "expectedResponseBody": "",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 9,
      "testDescription": "updating a business with optional params succeeds",
      "httpVerb": "PUT",
      "endpoint": "/businesses",
      "pathParams": "1",
      "queryParams": "",
      "inputData": "sampleBusinessWithPhotosOrReviews",
      "expectedResponseBody": "",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 10,
      "testDescription": "updating a business by id that doesn't exist fails",
      "httpVerb": "PUT",
      "endpoint": "/businesses",
      "pathParams": "23423423424",
      "queryParams": "",
      "inputData": "sampleBusinessMissingData",
      "expectedResponseBody": "sampleBusinessExpectedFailedResponse",
      "success": false,
      "preloadData": true
    },
    {
      "testId": 11,
      "testDescription": "updating a business with missing fields fails",
      "httpVerb": "PUT",
      "endpoint": "/businesses",
      "pathParams": "1",
      "queryParams": "",
      "inputData": "sampleBusinessMissingData",
      "expectedResponseBody": "sampleBusinessExpectedFailedResponse",
      "success": false,
      "preloadData": true
    },
    {
      "testId": 12,
      "testDescription": "deleting a business succeeds",
      "httpVerb": "DELETE",
      "endpoint": "/businesses",
      "pathParams": "1",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 13,
      "testDescription": "deleting a business that doesn't exist fails",
      "httpVerb": "DELETE",
      "endpoint": "/businesses",
      "pathParams": "23423423424",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "sampleBusinessExpectedFailedResponse",
      "success": false,
      "preloadData": true
    },
    {
      "testId": 14,
      "testDescription": "creating a photo succeeds",
      "httpVerb": "POST",
      "endpoint": "/photos",
      "pathParams": "",
      "queryParams": "",
      "inputData": "samplePhoto",
      "expectedResponseBody": "samplePhotoExpectedResponse",
      "success": true,
      "preloadData": false
    },
    {
      "testId": 15,
      "testDescription": "creating a photo with missing fields fails",
      "httpVerb": "POST",
      "endpoint": "/photos",
      "pathParams": "",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "samplePhotoExpectedResponse",
      "success": false,
      "preloadData": false
    },
    {
      "testId": 16,
      "testDescription": "getting a photo by id succeeds",
      "httpVerb": "GET",
      "endpoint": "/photos",
      "pathParams": "1",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "samplePhoto",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 17,
      "testDescription": "getting a photo that doesn't exist fails",
      "httpVerb": "GET",
      "endpoint": "/photos",
      "pathParams": "23423423424",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "samplePhoto",
      "success": false,
      "preloadData": true
    },
    {
      "testId": 18,
      "testDescription": "updating a photo succeeds",
      "httpVerb": "PUT",
      "endpoint": "/photos",
      "pathParams": "1",
      "queryParams": "",
      "inputData": "samplePhotoEdited",
      "expectedResponseBody": "",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 19,
      "testDescription": "updating a photo by id that doesn't exist fails",
      "httpVerb": "PUT",
      "endpoint": "/photos",
      "pathParams": "23423423424",
      "queryParams": "",
      "inputData": "samplePhoto",
      "expectedResponseBody": "samplePhotoFailedResponse",
      "success": false,
      "preloadData": true
    },
    {
      "testId": 20,
      "testDescription": "updating a photo with missing fields fails",
      "httpVerb": "PUT",
      "endpoint": "/photos",
      "pathParams": "1",
      "queryParams": "",
      "inputData": "samplePhotoMissingData",
      "expectedResponseBody": "samplePhotoFailedResponse",
      "success": false,
      "preloadData": true
    },
    {
      "testId": 21,
      "testDescription": "deleting a photo succeeds",
      "httpVerb": "DELETE",
      "endpoint": "/photos",
      "pathParams": "1",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 22,
      "testDescription": "deleting a photo that doesn't exist fails",
      "httpVerb": "DELETE",
      "endpoint": "/photos",
      "pathParams": "23423423424",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "samplePhotoFailedResponse",
      "success": false,
      "preloadData": true
    },
    {
      "testId": 23,
      "testDescription": "creating a review succeeds",
      "httpVerb": "POST",
      "endpoint": "/reviews",
      "pathParams": "",
      "queryParams": "",
      "inputData": "sampleReview",
      "expectedResponseBody": "sampleReviewExpectedResponse",
      "success": true,
      "preloadData": false
    },
    {
      "testId": 24,
      "testDescription": "creating a review with missing fields fails",
      "httpVerb": "POST",
      "endpoint": "/reviews",
      "pathParams": "",
      "queryParams": "",
      "inputData": "sampleReviewMissingData",
      "expectedResponseBody": "sampleReviewFailedResponse",
      "success": false,
      "preloadData": false
    },
    {
      "testId": 25,
      "testDescription": "getting a review by id succeeds",
      "httpVerb": "GET",
      "endpoint": "/reviews",
      "pathParams": "1",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "sampleReview",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 26,
      "testDescription": "getting a review that doesn't exist fails",
      "httpVerb": "GET",
      "endpoint": "/reviews",
      "pathParams": "23423423424",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "sampleReviewFailedResponse",
      "success": false,
      "preloadData": true
    },
    {
      "testId": 27,
      "testDescription": "updating a review succeeds",
      "httpVerb": "PUT",
      "endpoint": "/reviews",
      "pathParams": "1",
      "queryParams": "",
      "inputData": "sampleReviewEdited",
      "expectedResponseBody": "",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 28,
      "testDescription": "updating a review by id that doesn't exist fails",
      "httpVerb": "PUT",
      "endpoint": "/reviews",
      "pathParams": "23423423424",
      "queryParams": "",
      "inputData": "sampleReview",
      "expectedResponseBody": "sampleReviewFailedResponse",
      "success": false,
      "preloadData": true
    },
    {
      "testId": 29,
      "testDescription": "updating a review with missing fields fails",
      "httpVerb": "PUT",
      "endpoint": "/reviews",
      "pathParams": "1",
      "queryParams": "",
      "inputData": "sampleReviewMissingData",
      "expectedResponseBody": "sampleReviewFailedResponse",
      "success": false,
      "preloadData": true
    },
    {
      "testId": 30,
      "testDescription": "deleting a review succeeds",
      "httpVerb": "DELETE",
      "endpoint": "/reviews",
      "pathParams": "1",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 31,
      "testDescription": "deleting a review that doesn't exist fails",
      "httpVerb": "DELETE",
      "endpoint": "/reviews",
      "pathParams": "23423423424",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "sampleReviewFailedResponse",
      "success": false,
      "preloadData": true
    },
    {
      "testId": 32,
      "testDescription": "getting a users businesses succeeds",
      "httpVerb": "GET",
      "endpoint": "/users",
      "pathParams": "1/businesses",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "sampleBusinessNoPhotosOrReviews",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 33,
      "testDescription": "getting a users businesses fails for a user id that doesn't exist",
      "httpVerb": "GET",
      "endpoint": "/users",
      "pathParams": "23423423424/businesses",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "sampleBusinessExpectedFailedResponse",
      "success": false,
      "preloadData": true
    },
    {
      "testId": 34,
      "testDescription": "getting a users reviews succeeds",
      "httpVerb": "GET",
      "endpoint": "/users",
      "pathParams": "1/reviews",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "sampleReview",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 35,
      "testDescription": "getting a users reviews fails for a user id that doesn't exist",
      "httpVerb": "GET",
      "endpoint": "/users",
      "pathParams": "23423423424/reviews",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "sampleReviewFailedResponse",
      "success": false,
      "preloadData": true
    },
    {
      "testId": 36,
      "testDescription": "getting a users photos succeeds",
      "httpVerb": "GET",
      "endpoint": "/users",
      "pathParams": "1/photos",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "samplePhoto",
      "success": true,
      "preloadData": true
    },
    {
      "testId": 37,
      "testDescription": "getting a users photos fails for a user id that doesn't exist",
      "httpVerb": "GET",
      "endpoint": "/users",
      "pathParams": "23423423424/photos",
      "queryParams": "",
      "inputData": "",
      "expectedResponseBody": "samplePhotoFailedResponse",
      "success": false,
      "preloadData": true
    }
   ]

module.exports = testCases;